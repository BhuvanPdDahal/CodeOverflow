// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id            String         @id @default(auto()) @map("_id") @db.ObjectId
    name          String
    email         String         @unique
    username      String         @unique @default(uuid())
    image         String?
    password      String?
    emailVerified DateTime?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    accounts      Account[]
    questions     Question[]
    answers       Answer[]
    questionVotes QuestionVote[]
    answerVotes   AnswerVote[]
    Tag           Tag[]
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

enum VoteType {
    UP
    DOWN
}

model QuestionVote {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    type       VoteType
    voterId    String   @db.ObjectId
    questionId String   @db.ObjectId

    voter    User     @relation(fields: [voterId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id])

    @@unique([voterId, questionId])
}

model AnswerVote {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    type     VoteType
    voterId  String   @db.ObjectId
    answerId String   @db.ObjectId

    voter  User    @relation(fields: [voterId], references: [id], onDelete: Cascade)
    answer Answer? @relation(fields: [answerId], references: [id])

    @@unique([voterId, answerId])
}

model Question {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    askerId     String   @db.ObjectId
    title       String
    details     String
    expectation String
    tagIds      String[] @db.ObjectId
    views       String[] @default([])
    votesIds    String[]
    askedAt     DateTime @default(now())
    updatedAt   DateTime @default(now())

    asker   User           @relation(fields: [askerId], references: [id], onDelete: Cascade)
    answers Answer[]
    votes   QuestionVote[]
    tags    Tag[]          @relation(fields: [tagIds], references: [id])
}

model Answer {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    questionId String   @db.ObjectId
    answererId String   @db.ObjectId
    content    String
    votesIds   String[]
    answeredAt DateTime @default(now())
    updatedAt  DateTime @default(now())

    question Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
    answerer User         @relation(fields: [answererId], references: [id], onDelete: Cascade)
    votes    AnswerVote[]
}

model Tag {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String   @unique
    description String?
    questionIds String[] @db.ObjectId
    creatorId   String   @db.ObjectId

    questions Question[] @relation(fields: [questionIds], references: [id])
    creator   User       @relation(fields: [creatorId], references: [id])
}
